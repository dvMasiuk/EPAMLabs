//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace RailTransport
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    public class PassengerTrain : Train<PassengerCar>
    {
        private IList<PassengerCar> _passengerCars;

        public override int Length
        {
            get { return this._passengerCars.Count; }
        }

        public override void AddCar(PassengerCar car)
        {
            this._passengerCars.Add(car);
        }

        public virtual IEnumerable<PassengerCar> Find(int minPass, int maxPass)
        {
            return
            this._passengerCars.Where(x =>
            { return minPass <= x.CountTakenSeats && x.CountTakenSeats <= maxPass; });
        }

        public override void RemoveCar(PassengerCar car)
        {
            this._passengerCars.Remove(car);
        }

        public PassengerTrain(int number)
        {
            Number = number;
            this._passengerCars = new List<PassengerCar>();
        }

        public override IEnumerable<PassengerCar> Sort()
        {
            return this._passengerCars.OrderBy(x => x);
        }

        public override void RemoveAllCars()
        {
            this._passengerCars.Clear();
        }

        public virtual int CountPassAndBaggage()
        {
            return this._passengerCars.Sum(x => x.CountBaggage + x.CountPassengers);
        }


        public override void AddCars(PassengerCar[] cars)
        {
            for (int i = 0; i < cars.Length; i++)
            {
                this.AddCar(cars[i]);
            }
        }

        public virtual void AddPassenger(Passenger pass)
        {
            if (pass.Ticket.NumberTrain == Number)
            {
                this._passengerCars.First(x => x.Number == pass.Ticket.NumberCar).AddPassenger(pass);
            }
        }

        public virtual void AddPassengers(Passenger[] pass)
        {
            for (int i = 0; i < pass.Length; i++)
            {
                this.AddPassenger(pass[i]);
            }
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendFormat("Train №{0}", this.Number);
            foreach (var car in this._passengerCars)
            {
                sb.Append("\n");
                sb.Append(car.ToString());
            }
            return sb.ToString();
        }
    }
}

